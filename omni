#!/usr/bin/perl

# Omni, The Only Graphical Program I'll Ever Need (tm)
# Version 0.0.0-alpha, Just-get-it-running edition
# Copyright 2020 Michael Pirkola

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

use Tk;
use strict;
#use warnings;

# Super hacky start:
# Hide the keyboard so the window centers properly.
system('busctl call --user sm.puri.OSK0 /sm/puri/OSK0 sm.puri.OSK0 SetVisible b false');
# And sleep, because the above command doesn't wait.
# There's probably another way to check this,
# or a better way to place the window.
#sleep 1;

# We're already hacky, so here's a hacky <1 sec sleep.
select( undef , undef, undef, 0.35 );





my $mw = MainWindow->new;
# This size works on phosh with scaling=2
$mw->geometry("360x648");
$mw->title("Hello World");

my @source;

# Read input to fill initial lists.
push( @source, $_ ) while(<>);

my $state = 'running';

until( $state eq 'done' )  {
	# Parse input
	my @label;
	my @command;
	fill_lists( \@source, \@label, \@command );
	
	# Create buttons
	for( my $i = 0; $i < @label; $i++ )  {
		add_button( $mw, $label[$i], $command[$i] );
		}
	
	# Resize everything to fit.
	my( $columns, $rows ) = $mw->gridSize( );
	for( my $i = 0; $i < $columns; $i++ )  {
		$mw->gridColumnconfigure($i, -weight => 1);
		}
	for( my $i = 0; $i < $rows; $i++ )  {
		$mw->gridRowconfigure($i, -weight => 1);
		}
	
	# Draw it
	MainLoop;
	}






sub do_it  {
	system("@_ &");
	exit;
	}

sub fill_lists  {
	# Arguments are an array ref to parse, and two array refs to fill.
	my $source = shift @_;
	my $labels = shift @_;
	my $commands = shift @_;
	
	# Empty the provided array as we fill the new ones.
	# No real reason other than clean code here.
	while( @$source )  {
		$_ = shift @$source;
		chomp;
		# Skip blank lines
		next if /^$/;
		my $label = $_;
		# Handle files with an odd number of lines - just drop the end
		last unless $_ = shift @$source;
		chomp;
		my $command = $_;
		
		push @$labels, $label;
		push @$commands, $command;
		}
	
	
	}

sub add_button  {
	# Maybe add something about placement later
	my ( $mw, $label, $command ) = @_;
	$mw->Button(-text => "$label", -command =>
	    sub { &do_it($command) })->grid(-sticky => "nsew");
	}



